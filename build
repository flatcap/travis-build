#!/bin/bash

set -o errexit	# set -e
set -o nounset	# set -u

eval CONFIG_DIR="~/config"

function get_config_location()
{
	local TEST="/$1"

	while [ -n "$TEST" ]; do
		if [ -f "$CONFIG_DIR${TEST}.txt" ]; then
			echo "$CONFIG_DIR${TEST}.txt"
			return
		fi
		TEST="${TEST%/*}"
	done

	echo "$CONFIG_DIR/default.txt"
}

function _run_build()
{
	if [[ $# -ne 4 ]]; then
		echo "Illegal arguments passed."
		return
	fi
	BRANCH="$1"
	LEN="$2"
	FILE="$3"
	CONFIG_DIR="$4"

	echo "-------------------------------------------------------------------------------"
	echo "BRANCH: $BRANCH ($LEN configuration$([ $LEN != 1 ] && echo 's'))"
	echo "CONFIG FILE: ${FILE#$CONFIG_DIR/}"
	echo "-------------------------------------------------------------------------------"
	BUILD_COUNT=0
	while read CONFIG; do
		: $((BUILD_COUNT++))
		echo "BUILD: $BUILD_COUNT/$LEN"
		if [ -n "$CONFIG" ]; then
			echo $CONFIG | fmt -w 75 | sed 's/^/    /'
		else
			echo "    <no options>"
		fi
		echo
		git clean -xdfq
		autoreconf --install
		./configure --quiet $CONFIG || exit 1
		sed -i 's/m4 po intl doc contrib/intl/' Makefile
		sed -i 's/\<cru\>/cr/' imap/Makefile
		sed -i '/USE_DOTLOCK/d' config.h
		make -s -j2 || exit 1
		echo
		./mutt -v
		echo "-------------------------------------------------------------------------------"
	done < "$FILE"
}


if [ -n "${TRAVIS_BRANCH:-}" ]; then
	BRANCH="$TRAVIS_BRANCH"
else
	BRANCH=$(git rev-parse --abbrev-ref HEAD)
fi

if [[ "${TRAVIS_PULL_REQUEST:-}" =~ ^[0-9]+$ ]]; then
	FILE="$CONFIG_DIR/pull-request.txt"
else
	FILE=$(get_config_location $BRANCH)
fi

LEN=$(wc -l "$FILE" | cut -d' ' -f1)

if [[ $BRANCH == "bugs/"* && ! -z "$TRAVIS_COMMIT_RANGE" ]]; then
	echo "-------------------------------------------------------"
	echo "In Bug Branch: $BRANCH"
	echo "Will build all new commits"
	echo "-------------------------------------------------------"
	while read -r rev; do
		git checkout "$rev"
		echo "Commit: $rev"
		_run_build "$BRANCH" "$LEN" "$FILE" "$CONFIG_DIR"
	done < <(git rev-list $TRAVIS_COMMIT_RANGE)
else
	_run_build "$BRANCH" "$LEN" "$FILE" "$CONFIG_DIR"
fi

if [ $BRANCH = "neomutt" ]; then
	# We'll reuse the last build
	git clean -xdfq
	autoreconf --install
	./configure --quiet --prefix=$HOME/install --enable-compressed --enable-debug --enable-exact-address --enable-gpgme --enable-hcache --enable-imap --enable-locales-fix --enable-mailtool --enable-nfs-fix --enable-nntp --enable-notmuch --enable-pop --enable-sidebar --enable-smtp --with-gnutls --with-gss --with-homespool --with-mixmaster --with-regex --with-sasl --with-ssl --with-tokyocabinet
	echo "-------------------------------------------------------------------------------"
	echo "MAKE"
	make -j2
	echo "-------------------------------------------------------------------------------"
	echo "INSTALL"
	make install
	echo "-------------------------------------------------------------------------------"
	echo "DIST"
	make -s dist
	echo "-------------------------------------------------------------------------------"
	echo "DISTCHECK"
	make -s distcheck
	echo "-------------------------------------------------------------------------------"
fi

echo Success
exit 0

